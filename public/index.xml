<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>前端研磨坊</title>
        <link>/</link>
        <description>This is my cool site 1212</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 10 Jan 2024 09:21:51 &#43;0800</lastBuildDate>
            <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>通过配置“内容安全策略”禁用eval</title>
    <link>/posts/disable-eval/</link>
    <pubDate>Sun, 24 Dec 2023 10:56:15 &#43;0800</pubDate>
    <author>Author</author>
    <guid>/posts/disable-eval/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/banner.webp" referrerpolicy="no-referrer">
            </div>eval()是JavaScript中的一个强大函数，它可以从文字字符串运行javascript代码，但出于一些不安全的原因，我们不建议使用eval(),本文介绍如何在项目中禁用该函数。]]></description>
</item>
<item>
    <title>如何使用Css变量</title>
    <link>/posts/use-css-var/</link>
    <pubDate>Wed, 10 Jan 2024 09:21:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>/posts/use-css-var/</guid>
    <description><![CDATA[借助css变量，可以让我们更佳轻松地配置、修改页面的样式。早期组织css需借助预编译语言如less、sass等，而如今css变量则赋予了css原生的能力，本文介绍如何使用css变量.]]></description>
</item>
<item>
    <title>Hugo 静态网站增加搜索功能</title>
    <link>/posts/hugo-static-search/</link>
    <pubDate>Mon, 08 Jan 2024 11:45:38 &#43;0800</pubDate>
    <author>Author</author>
    <guid>/posts/hugo-static-search/</guid>
    <description><![CDATA[之前没有给博客增加文章检索功能，今天看到别人的博客都有这个功能，并且用来检索之前发布的文章蛮好用的，今天给博客增加上去，遇到了一些坑，今天记录一下。]]></description>
</item>
<item>
    <title>javascript中文件的切片与合并</title>
    <link>/posts/js-slice-concat-file/</link>
    <pubDate>Mon, 08 Jan 2024 09:26:31 &#43;0800</pubDate>
    <author>Author</author>
    <guid>/posts/js-slice-concat-file/</guid>
    <description><![CDATA[文件切片在前端大文件上传时有很好的应用效果，可以将文件控制在更小的粒度，毕竟操作大文件困难，而操作小粒度的文件更简单高效。文本介绍前端和Nodejs中文件的切片与合并操作。]]></description>
</item>
<item>
    <title>如何在Nodejs中使用JWT</title>
    <link>/posts/jwt_in_nodejs_project/</link>
    <pubDate>Sun, 07 Jan 2024 19:16:35 &#43;0800</pubDate>
    <author>Author</author>
    <guid>/posts/jwt_in_nodejs_project/</guid>
    <description><![CDATA[JWT 是jsonwebtoken的简称，用于用户认证和权限鉴定。本文介绍一个名叫“jsonwebtoken”的npm包，它实现了JWT的常用的功能。]]></description>
</item>
<item>
    <title>Nextjs基础介绍（新手参考）</title>
    <link>/posts/nextjs-api-the-complete-guide-in-2023/</link>
    <pubDate>Mon, 18 Dec 2023 12:15:58 &#43;0800</pubDate>
    <author>Author</author>
    <guid>/posts/nextjs-api-the-complete-guide-in-2023/</guid>
    <description><![CDATA[渲染 预渲染：
默认情况下，Next.js 预渲染每个页面。 预渲染可以带来更好的性能。
Nextjs 同时支持一种或多种渲染模式：
在 服务器端渲染 (SSR) 模式下，页面 HTML 是在每次请求时生成的。
在静态站点生成 (SSG) 模式下，页面 HTML 是在构建时生成的。
在 客户端渲染 (CSR) 模式下，页面 HTML 由 javascript 在客户端生成。
路由 Link： 在客户端进行路由转换。
import Link from &#39;next/link&#39;; &lt;Link href=&#34;/about&#34;&gt;A link&lt;/Link&gt; &lt;Link href={{ pathname: &#39;/blog/[slug]&#39;, query: { slug: &#39;post-one&#39;}, }}&gt;A link&lt;/Link&gt; useRouter 和 withRouter useRouter 是一个在函数组件内部使用的钩子。
import { useRouter } from &#39;next/router&#39;; const router = useRouter(); router.push(&#39;url&#39;) useRouter 返回的对象是 router 对象，它包含一些您可能想要检索的属性。
withRouter 是一个可以在函数组件和类组件内部使用的钩子，它将把 router 对象传递给你的包装组件。]]></description>
</item>
<item>
    <title>编写简洁 React 代码的 10 个最佳实践</title>
    <link>/posts/writing-clean-react-code/</link>
    <pubDate>Thu, 16 Nov 2023 10:25:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>/posts/writing-clean-react-code/</guid>
    <description><![CDATA[编写干净的 React 代码很重要，因为它反映了仔细和专注的心态。 当我们花时间编写干净、组织良好的代码时，我们就展示了对软件开发技术的承诺。 干净的代码证明我们重视工作质量，并愿意投入所需的时间和精力来创造真正卓越的东西。
为什么组织和编写干净的 React 代码很重要？ 出于实际原因以及视觉影响，干净的代码组织在 React 中非常重要。 精心设计和组织良好的代码库可以在视觉上令人愉悦，使其更易于使用和理解。
当代码混乱无序时，可能很难理解不同的元素如何组合在一起形成最终产品。 这可能会导致处理代码的开发人员和将与应用程序交互的最终用户感到困惑。
同样，当代码干净且组织良好时，可以更轻松地查看不同元素之间的关系，了解它们如何组合在一起，并根据需要进行更改。
如何编写干净的 React 代码？ 编写干净的代码对于使项目具有可读性、可扩展性和可维护性至关重要。 以下是编写干净 React 代码的十个最佳 React 技巧：
使用有意义的组件名称 给出反映其功能的组件名称。 避免使用“Box”或“DoesTheThing”等通用名称。 有意义的名称使人们更容易理解组件的功能及其在应用程序中的用途。 清晰简洁的组件名称可以减轻开发人员的认知负担，从而更轻松地导航和维护代码库。
当与多个开发人员一起开发项目时，清晰且有意义的组件名称可以帮助每个人理解代码并更有效地协作。 如果一个组件根据其用途来命名，将来会更容易维护、重构或修改。 此外，当您为组件指定一个有意义的名称时，它有助于在调试时轻松地在代码库中找到该组件。
分解组件 将复杂的组件分解为更小、更易于管理的组件可以更轻松地理解和维护代码。 较小的组件更容易在应用程序中重用，从而更容易维护和扩展代码库。 较小的组件也更容易理解，从而更容易修复错误和添加新功能。 同样，较小的组件更容易测试，从而更容易编写有效的单元测试并确保代码质量。 分解组件可以让您分离应用程序的关注点，并有助于管理和理解代码库。 它可以通过减少浏览器需要呈现或处理的代码量来帮助提高应用程序的性能。
使用解构 解构 props 和 state 使代码更加简洁和可读。 您可以编写“const {title} = props”，而不是编写“props.title”。 它允许您以更简洁和可读的方式从对象或数组中提取值，从而减少需要编写的代码量。 解构可以通过显式声明您感兴趣的属性或元素来使代码更具可读性。
它还可以帮助防止在访问不存在的属性或元素时出现错误。 通过分析代码的哪些部分使用了哪些值，可以更轻松地重构代码，并且可以通过仅提取所需的值来简化在组件之间传递 props 的过程。
保持较小的组件 保持组件较小并专注于单一职责可以更轻松地测试和调试代码。 较小的组件更容易在应用程序中重用，从而更容易维护和扩展代码库。 它们更容易理解和维护，更容易修复错误和添加新功能。 较小的组件也更容易测试，从而更容易编写有效的单元测试并确保代码质量。 将组件分解为更小的部分可以让您分离应用程序的关注点，从而更轻松地管理和理解代码库。 较小的组件还可以通过减少浏览器需要呈现或处理的代码量来帮助提高应用程序的性能。
除了这些好处之外，保持组件较小还可以使协作变得更容易 通过降低各个组件的复杂性并允许进行更有针对性和更细致的讨论，与其他开发人员合作。
使用prop-types 使用“prop-types”来记录和验证传递给组件的 props 类型有助于防止错误。 Prop 类型有助于确保将正确的数据类型传递到组件中，从而减少出现运行时错误的可能性。 Prop 类型充当组件的文档，明确每个组件需要什么类型的数据以及组件如何处理这些数据。 当不正确的数据类型传递到组件时，它们可以通过提供有用的错误消息来帮助识别代码问题。]]></description>
</item>
<item>
    <title>如何修复CORS错误&#34;No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource&#34;？</title>
    <link>/posts/fix-cors-error/</link>
    <pubDate>Thu, 16 Nov 2023 09:00:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>/posts/fix-cors-error/</guid>
    <description><![CDATA[CORS,即跨域资源共享,是前端工程师经常面临的一中情况，文中将介绍CORS的感念和工作原理。我们将了解什么是预检请求以及 CORS 如何依赖它们。此外，我们将介绍如何使用 CORS 并解决应用程序中由此产生的问题。]]></description>
</item>
<item>
    <title>安装 Angular</title>
    <link>/posts/install/</link>
    <pubDate>Fri, 02 Aug 2019 11:04:49 &#43;0800</pubDate>
    <author>Author</author>
    <guid>/posts/install/</guid>
    <description><![CDATA[npm install angular ]]></description>
</item>
<item>
    <title>项目中配置 Angular</title>
    <link>/posts/config/</link>
    <pubDate>Fri, 02 Aug 2019 11:04:49 &#43;0800</pubDate>
    <author>Author</author>
    <guid>/posts/config/</guid>
    <description><![CDATA[npm set config angular ]]></description>
</item>
</channel>
</rss>
